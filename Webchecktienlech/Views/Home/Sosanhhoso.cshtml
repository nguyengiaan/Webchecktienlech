@{
    ViewData["Title"] = "Website check lệch tiền";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4"> Kiểm tra số hồ sơ</h1>
        
        <div class="card shadow-sm p-4">
            <div class="mb-3">
            <label for="file1" class="form-label">Chọn ngày tháng</label>
                <input type="date" id="datetime" name="datetime" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="file1" class="form-label">Chọn file Excel 1 (File cổng BHYT):</label>
                <input type="file" id="file1" class="form-control" accept=".xlsx" />
            </div>
            <div class="mb-3">
                <label for="file2" class="form-label">Chọn file Excel 2 (File cổng trên HIS):</label>
                <input type="file" id="file2" class="form-control" accept=".xlsx" />
            </div>
            <button id="compareButton" class="btn btn-primary w-100">So sánh</button>
        </div>

        <div class="mt-5">
            <h2 class="text-center" id="slhoso"></h2>
            <div class="table-responsive">
                <table class="table table-bordered table-striped mt-3" id="resultTable">
                    <thead class="table-dark">
                        <tr>
                            <th>Mã BN</th>
                            <th>Tổng chi (BHYT)</th>
                            <th>Tổng chi (HIS)</th>
                            <th>Bệnh nhân CCT (BHYT)</th>
                            <th>Bệnh nhân CCT (HIS)</th>
                            <th>Bảo hiểm TT (BHYT)</th>
                            <th>Bảo hiểm TT (HIS)</th>
                            <th>Kết quả</th>
                    
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Kết quả sẽ được thêm vào đây -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

 
</body>
</html>
@section Scripts {
   <script>
        document.getElementById("compareButton").addEventListener("click", async () => {
            try {
                const file1 = document.getElementById("file1").files[0];
                const file2 = document.getElementById("file2").files[0];

                if (!file1 || !file2) {
                    alert("Vui lòng chọn cả hai file Excel!");
                    return;
                }

                const data1 = await readExcel(file1);
                const data2 = await readExcel(file2);

                if (!data1.length || !data2.length) {
                    alert("Một trong hai file không có dữ liệu!");
                    return;
                }

                const mismatchedRows = compareData(data1, data2);
                displayResults(mismatchedRows);
            } catch (error) {
                console.error("Lỗi:", error);
                alert("Có lỗi xảy ra khi so sánh file. Vui lòng kiểm tra lại định dạng file!");
            }
        });

        async function readExcel(file) {
            try {
                const data = await file.arrayBuffer();
                const workbook = XLSX.read(data, { type: "array" });
                const sheetName = workbook.SheetNames[0];
                const sheet = workbook.Sheets[sheetName];
                const jsonData = XLSX.utils.sheet_to_json(sheet, { raw: true, defval: null });
                
                // Chuẩn hóa dữ liệu
                return jsonData.map(row => ({
                    "Mã BN": row["Mã BN"] || row["MA_BN"] || "",
                    "Tổng chi": parseFloat(row["Tổng chi"] || row["T_TONGCHI"] || 0),
                    "Bệnh nhân CCT": parseFloat(row["Bệnh nhân CCT"] || row["T_BNTT"] || 0) + parseFloat(row["Bệnh nhân TT"]|| 0),
                    "Bảo hiểm TT": parseFloat(row["Bảo hiểm TT"] || row["T_BHTT"] || 0),
                    "Ngày TT": (row["Ngày TT"] || row["NGAY_TT"] || "").split(" ")[0], // Chỉ lấy phần ngày
                }));
                
            } catch (error) {
                console.error("Lỗi đọc file:", error);
                throw new Error("Không thể đọc file Excel. Vui lòng kiểm tra lại định dạng file!");
            }
        }

function compareData(data1, data2) {
    const mismatchedRows = [];
    const selectedDate = document.getElementById("datetime").value.split("-").reverse().join("/");

    if (!selectedDate) {
        alert("Vui lòng chọn ngày tháng!");
        return mismatchedRows;
    }

    const filteredData1 = data1.filter(row => row["Ngày TT"] === selectedDate);
    console.log("filteredData1",filteredData1);
    console.log("data2",data2);
    filteredData1.forEach(row1 => {
        const row2 = data2.find(r => String(r["Mã BN"]) === String(row1["Mã BN"]));
        if (!row2) {
            mismatchedRows.push({
                "Mã BN": row1["Mã BN"],
                "Tổng chi (BHYT)": row1["Tổng chi"].toLocaleString('vi-VN'),
                "Tổng chi (HIS)": "Không có",
                "Bệnh nhân CCT (BHYT)": row1["Bệnh nhân CCT"].toLocaleString('vi-VN'),
                "Bệnh nhân CCT (HIS)": "Không có",
                "Bảo hiểm TT (BHYT)": row1["Bảo hiểm TT"].toLocaleString('vi-VN'),
                "Bảo hiểm TT (HIS)": "Không có",
                "Kết quả": "Chỉ có trong file BHYT"
            });
        }
    });

    data2.forEach(row2 => {
        const row1 = filteredData1.find(r => String(r["Mã BN"]) === String(row2["Mã BN"]));
        if (!row1) {
            mismatchedRows.push({
                "Mã BN": row2["Mã BN"],
                "Tổng chi (BHYT)": "Không có",
                "Tổng chi (HIS)": row2["Tổng chi"].toLocaleString('vi-VN'),
                "Bệnh nhân CCT (BHYT)": "Không có",
                "Bệnh nhân CCT (HIS)": row2["Bệnh nhân CCT"].toLocaleString('vi-VN'),
                "Bảo hiểm TT (BHYT)": "Không có",
                "Bảo hiểm TT (HIS)": row2["Bảo hiểm TT"].toLocaleString('vi-VN'),
                "Kết quả": "Chỉ có trong file HIS"
            });
        }
    });

    // Hiển thị số lượng kết quả
    document.getElementById("slhoso").textContent = `Số lượng khác biệt: ${mismatchedRows.length}`;

    return mismatchedRows; // Đảm bảo return ở cuối function
}

function exportToExcel(data) {
    if (data.length === 0) {
        alert("Không có dữ liệu để xuất!");
        return;
    }

    const worksheet = XLSX.utils.json_to_sheet(data);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Kết quả so sánh");

    const today = new Date();
    const formattedDate = today.toISOString().split('T')[0]; // Lấy ngày hiện tại ở định dạng YYYY-MM-DD
    const fileName = `KetQuaSoSanh_${formattedDate}.xlsx`;

    XLSX.writeFile(workbook, fileName);
}

document.getElementById("compareButton").addEventListener("click", async () => {
    try {
        const file1 = document.getElementById("file1").files[0];
        const file2 = document.getElementById("file2").files[0];

        if (!file1 || !file2) {
            alert("Vui lòng chọn cả hai file Excel!");
            return;
        }

        const data1 = await readExcel(file1);
        const data2 = await readExcel(file2);

        if (!data1.length || !data2.length) {
            alert("Một trong hai file không có dữ liệu!");
            return;
        }

        const mismatchedRows = compareData(data1, data2);
        displayResults(mismatchedRows);

        // Thêm nút xuất Excel
        const exportButton = document.createElement("button");
        exportButton.textContent = "Xuất Excel";
        exportButton.className = "btn btn-success mt-3 w-100";
        exportButton.addEventListener("click", () => exportToExcel(mismatchedRows));
        document.querySelector(".container").appendChild(exportButton);
    } catch (error) {
        console.error("Lỗi:", error);
        alert("Có lỗi xảy ra khi so sánh file. Vui lòng kiểm tra lại định dạng file!");
    }
});

        function displayResults(mismatchedRows) {
            const tableBody = document.getElementById("resultTable").querySelector("tbody");
            tableBody.innerHTML = "";

            if (mismatchedRows.length === 0) {
                const row = document.createElement("tr");
                const cell = document.createElement("td");
                cell.colSpan = 8;
                cell.textContent = "Không có sự khác biệt nào!";
                cell.classList.add("text-center");
                row.appendChild(cell);
                tableBody.appendChild(row);
                return;
            }

            mismatchedRows.forEach(row => {
                const tableRow = document.createElement("tr");

                Object.values(row).forEach(value => {
                    const cell = document.createElement("td");
                    cell.textContent = value;
                    tableRow.appendChild(cell);
                });

                tableBody.appendChild(tableRow);
            });
        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
}
@section Styles {
    <style>
    body {
        background-color: #ffe4e1; /* Màu nền hồng nhạt */
        font-family: Arial, sans-serif;
    }

    h1 {
        color: #ff69b4; /* Màu hồng đậm */
        font-weight: bold;
    }

    .card {
        border: 2px solid #ff69b4; /* Viền màu hồng đậm */
        border-radius: 10px;
        background-color: #fff0f5; /* Nền thẻ màu hồng nhạt */
    }

    .btn-primary {
        background-color: #ff69b4; /* Nút màu hồng đậm */
        border-color: #ff69b4;
    }

    .btn-primary:hover {
        background-color: #ff85c1; /* Màu hồng nhạt hơn khi hover */
        border-color: #ff85c1;
    }

    .table {
        border: 2px solid #ff69b4; /* Viền bảng màu hồng đậm */
    }

    .table thead {
        background-color: #ff69b4; /* Nền tiêu đề bảng màu hồng đậm */
        color: white; /* Chữ màu trắng */
    }

    .table tbody tr:nth-child(even) {
        background-color: #fff0f5; /* Hàng chẵn màu hồng nhạt */
    }

    .table tbody tr:nth-child(odd) {
        background-color: #ffe4e1; /* Hàng lẻ màu hồng nhạt hơn */
    }

    .text-center {
        color: #ff69b4; /* Màu chữ trung tâm */
    }
</style>
}